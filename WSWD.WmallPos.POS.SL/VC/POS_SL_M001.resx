<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="currentItemInfo1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAlEAAAA6CAYAAACQ0AxuAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAACH
        DwAAjA8AAP1SAACBQAAAfXkAAOmLAAA85QAAGcxzPIV3AAAKOWlDQ1BQaG90b3Nob3AgSUNDIHByb2Zp
        bGUAAEjHnZZ3VFTXFofPvXd6oc0w0hl6ky4wgPQuIB0EURhmBhjKAMMMTWyIqEBEEREBRZCggAGjoUis
        iGIhKKhgD0gQUGIwiqioZEbWSnx5ee/l5ffHvd/aZ+9z99l7n7UuACRPHy4vBZYCIJkn4Ad6ONNXhUfQ
        sf0ABniAAaYAMFnpqb5B7sFAJC83F3q6yAn8i94MAUj8vmXo6U+ng/9P0qxUvgAAyF/E5mxOOkvE+SJO
        yhSkiu0zIqbGJIoZRomZL0pQxHJijlvkpZ99FtlRzOxkHlvE4pxT2clsMfeIeHuGkCNixEfEBRlcTqaI
        b4tYM0mYzBXxW3FsMoeZDgCKJLYLOKx4EZuImMQPDnQR8XIAcKS4LzjmCxZwsgTiQ7mkpGbzuXHxArou
        S49uam3NoHtyMpM4AoGhP5OVyOSz6S4pyalMXjYAi2f+LBlxbemiIluaWltaGpoZmX5RqP+6+Dcl7u0i
        vQr43DOI1veH7a/8UuoAYMyKarPrD1vMfgA6tgIgd/8Pm+YhACRFfWu/8cV5aOJ5iRcIUm2MjTMzM424
        HJaRuKC/6386/A198T0j8Xa/l4fuyollCpMEdHHdWClJKUI+PT2VyeLQDf88xP848K/zWBrIieXwOTxR
        RKhoyri8OFG7eWyugJvCo3N5/6mJ/zDsT1qca5Eo9Z8ANcoISN2gAuTnPoCiEAESeVDc9d/75oMPBeKb
        F6Y6sTj3nwX9+65wifiRzo37HOcSGExnCfkZi2viawnQgAAkARXIAxWgAXSBITADVsAWOAI3sAL4gWAQ
        DtYCFogHyYAPMkEu2AwKQBHYBfaCSlAD6kEjaAEnQAc4DS6Ay+A6uAnugAdgBIyD52AGvAHzEARhITJE
        geQhVUgLMoDMIAZkD7lBPlAgFA5FQ3EQDxJCudAWqAgqhSqhWqgR+hY6BV2ArkID0D1oFJqCfoXewwhM
        gqmwMqwNG8MM2An2hoPhNXAcnAbnwPnwTrgCroOPwe3wBfg6fAcegZ/DswhAiAgNUUMMEQbigvghEUgs
        wkc2IIVIOVKHtCBdSC9yCxlBppF3KAyKgqKjDFG2KE9UCIqFSkNtQBWjKlFHUe2oHtQt1ChqBvUJTUYr
        oQ3QNmgv9Cp0HDoTXYAuRzeg29CX0HfQ4+g3GAyGhtHBWGE8MeGYBMw6TDHmAKYVcx4zgBnDzGKxWHms
        AdYO64dlYgXYAux+7DHsOewgdhz7FkfEqeLMcO64CBwPl4crxzXhzuIGcRO4ebwUXgtvg/fDs/HZ+BJ8
        Pb4LfwM/jp8nSBN0CHaEYEICYTOhgtBCuER4SHhFJBLVidbEACKXuIlYQTxOvEIcJb4jyZD0SS6kSJKQ
        tJN0hHSedI/0ikwma5MdyRFkAXknuZF8kfyY/FaCImEk4SXBltgoUSXRLjEo8UISL6kl6SS5VjJHslzy
        pOQNyWkpvJS2lIsUU2qDVJXUKalhqVlpirSptJ90snSxdJP0VelJGayMtoybDFsmX+awzEWZMQpC0aC4
        UFiULZR6yiXKOBVD1aF6UROoRdRvqP3UGVkZ2WWyobJZslWyZ2RHaAhNm+ZFS6KV0E7QhmjvlygvcVrC
        WbJjScuSwSVzcopyjnIcuUK5Vrk7cu/l6fJu8onyu+U75B8poBT0FQIUMhUOKlxSmFakKtoqshQLFU8o
        3leClfSVApXWKR1W6lOaVVZR9lBOVd6vfFF5WoWm4qiSoFKmclZlSpWiaq/KVS1TPaf6jC5Ld6In0Svo
        PfQZNSU1TzWhWq1av9q8uo56iHqeeqv6Iw2CBkMjVqNMo1tjRlNV01czV7NZ874WXouhFa+1T6tXa05b
        RztMe5t2h/akjpyOl06OTrPOQ12yroNumm6d7m09jB5DL1HvgN5NfVjfQj9ev0r/hgFsYGnANThgMLAU
        vdR6KW9p3dJhQ5Khk2GGYbPhqBHNyMcoz6jD6IWxpnGE8W7jXuNPJhYmSSb1Jg9MZUxXmOaZdpn+aqZv
        xjKrMrttTjZ3N99o3mn+cpnBMs6yg8vuWlAsfC22WXRbfLS0suRbtlhOWWlaRVtVWw0zqAx/RjHjijXa
        2tl6o/Vp63c2ljYCmxM2v9ga2ibaNtlOLtdZzllev3zMTt2OaVdrN2JPt4+2P2Q/4qDmwHSoc3jiqOHI
        dmxwnHDSc0pwOub0wtnEme/c5jznYuOy3uW8K+Lq4Vro2u8m4xbiVun22F3dPc692X3Gw8Jjncd5T7Sn
        t+duz2EvZS+WV6PXzAqrFetX9HiTvIO8K72f+Oj78H26fGHfFb57fB+u1FrJW9nhB/y8/Pb4PfLX8U/z
        /z4AE+AfUBXwNNA0MDewN4gSFBXUFPQm2Dm4JPhBiG6IMKQ7VDI0MrQxdC7MNaw0bGSV8ar1q66HK4Rz
        wzsjsBGhEQ0Rs6vdVu9dPR5pEVkQObRGZ03WmqtrFdYmrT0TJRnFjDoZjY4Oi26K/sD0Y9YxZ2O8Yqpj
        ZlgurH2s52xHdhl7imPHKeVMxNrFlsZOxtnF7YmbineIL4+f5rpwK7kvEzwTahLmEv0SjyQuJIUltSbj
        kqOTT/FkeIm8nhSVlKyUgVSD1ILUkTSbtL1pM3xvfkM6lL4mvVNAFf1M9Ql1hVuFoxn2GVUZbzNDM09m
        SWfxsvqy9bN3ZE/kuOd8vQ61jrWuO1ctd3Pu6Hqn9bUboA0xG7o3amzM3zi+yWPT0c2EzYmbf8gzySvN
        e70lbEtXvnL+pvyxrR5bmwskCvgFw9tst9VsR23nbu/fYb5j/45PhezCa0UmReVFH4pZxde+Mv2q4quF
        nbE7+0ssSw7uwuzi7Rra7bD7aKl0aU7p2B7fPe1l9LLCstd7o/ZeLV9WXrOPsE+4b6TCp6Jzv+b+Xfs/
        VMZX3qlyrmqtVqreUT13gH1g8KDjwZYa5ZqimveHuIfu1nrUttdp15UfxhzOOPy0PrS+92vG140NCg1F
        DR+P8I6MHA082tNo1djYpNRU0gw3C5unjkUeu/mN6zedLYYtta201qLj4Ljw+LNvo78dOuF9ovsk42TL
        d1rfVbdR2grbofbs9pmO+I6RzvDOgVMrTnV32Xa1fW/0/ZHTaqerzsieKTlLOJt/duFczrnZ86nnpy/E
        XRjrjup+cHHVxds9AT39l7wvXbnsfvlir1PvuSt2V05ftbl66hrjWsd1y+vtfRZ9bT9Y/NDWb9nffsPq
        RudN65tdA8sHzg46DF645Xrr8m2v29fvrLwzMBQydHc4cnjkLvvu5L2key/vZ9yff7DpIfph4SOpR+WP
        lR7X/aj3Y+uI5ciZUdfRvidBTx6Mscae/5T+04fx/Kfkp+UTqhONk2aTp6fcp24+W/1s/Hnq8/npgp+l
        f65+ofviu18cf+mbWTUz/pL/cuHX4lfyr468Xva6e9Z/9vGb5Dfzc4Vv5d8efcd41/s+7P3EfOYH7IeK
        j3ofuz55f3q4kLyw8Bv3hPP74uYdwgAAAAlwSFlzAAAOxAAADsQBlSsOGwAADppJREFUeF7t3NW25NYV
        hWE9UpiZEztxYmaHmeMkDjPTRRxmRtsBx2HGtzrRqqotLS39W9qiqmp7Xvx33VXnYvYYn5fkU33mhf+9
        SH3W96L/9frcxOgzOsXvrPM/T6/b/tP06Uyfuu3fbbfu+2TTv9pu2feJpn/u+njq5tQ/dn3MumnfR2/6
        e6ePpG78W6cPd/prpw/doJRSSm3RX5o+eH23D1z/507vv876U9P7rrX+uOu9qWv+cPEe17uv/v2ud/mu
        +t3FOw+948rfNt1x5X0Xd7zgvou37/rNxdue77v34q3WFfde3H7Fr3e95Xm/2vVm67m/vHhT0y8u3nj5
        vjdcfs/FGy675+L1l92963XPse66eK317J9fvObQq5/1s6ZXPfOnnV75jJ80veLpP+708qf9qNPLnvrD
        Ti99yg+a8oiyCD6uSWDywXf5nwOrgXSpACqHJx67UkoptaQWTTk8RUDt8cSAavAUAJXw1AGUw1M5oPp4
        uv1544BKeIqA2uOJATWEpzFADeEJEWX1gEMImhN9dl38/l41jiYB6oAnBFQPTzlAOTxlADV+fSqFU3/8
        Siml1JQITSmPpxZQEU8BUDWaCFBTrk9TAVVyfUqA6l6f7pp8fYqA8niKgCI8veTJ39/VQ5RF2NlFOMpF
        f99F39urxlExnvD6NASoguvTAVAeTzlAleFp2vCVUkqpOUU4EZ5aQDk8HQCV8ISAcnh6oF2fEp5aRNUQ
        QcDUEX7mRp+P2c/jIjhZS/HUAGoATyXXp3E8CUxKKaW2i8CUosd2Hk/bv/s0D08eUB5Pp7o+RTxZL37S
        9w6Isgg0EAEpRX++qPQzHCI0pebjqQXU4PUJ8NQAagaeaPAWjV0ppZRaWguncjzRo7vc9amHpwWAGsJT
        7tFduj7NxdNSQBmeUpXBpIMYQs7axe+si1jyEZxOhacWUISnPJxo6Lm6/wCUUkqpkrpgSvl3njp4OgBq
        Dp4aQK1wfcrhqeTR3VRArYWnDqJSPdwQgKZGn1vnv5eaA6cunsrfedoCT+U44tErpZRSc2rRlIfTFDzh
        9WkFPI2997Tk1xZEPEVAeTxFQJXg6UVP/O6uDqJ8BJ850WdTHTSVwGnJ1SmDp+nvPHXhFPG0FEvdfwhK
        KaXUUHswIZwsB6dzwNMOUIN4Wv7eU8RTBJTHUwmgEp4aRCW0EGy2rAMm6wCmPpq2hVMJniKchq5OQ2ga
        G7xSSik1pR6UfDWUIpzOBk8bvzS+NZ6sFz7hOzWiaqR4zBB45uY/t5N9p6sETV047dHEcLLmXZ1aPE1/
        ZEdwIizh0JVSSqm51TDyRTRl4WRl4HQqPG390vgYoErxlKoMLR3UEHrmFD/30CCYsmhq4dSgqQOnPZqK
        r04Ip7lXJ4LTAJjqMVM0eqWUUmpOHk1DcMKr0wke283B01RADeEpAmoMTw5RhpcWNQSfqfnPazsgyXfA
        Uh9MLZqmXpuWw2mPp2E4dfGUhVM95FIkxcErpZRSc+ugyaqxNO/qNB1P8eq09mO7LfFEgIpwuu3x3246
        IMpHACopfo6rRtFkMFlDaHJwQjRZDk1T4cR4KofTVCT1Bq+UUkrNLaApC6cNH9khntzV6VLGU4MoQ0xE
        DkIoF/39uj6UrBZLJWAqRdM4nPK/EHMtOA2BCQfuO4xdKaWUmpqHki+iKRXhtC2e2qvT/QlPtz7uW7tq
        RBlo+uAhGKXoz7d1oWR1sGRNANM8NOXgNP77nNaAUw5JNHKllFJqTgQkii5Oo3AqxFPJI7u1fs/TqfGU
        4OSrDDUEnyn1kJTqYMlaCCbLgWkcTeNwmvqOE8GJ0DR37EoppdScGiwdwNSiaQ+nFk0OTqtenTyeyuBU
        gqcIp6l4ioBaA0/WLY/9Zo2oBBxC0FAdHPlaKPWwZI2AycqBaS6aGE4tmrJwqqFUBKcJaOqM3A1dKaWU
        mlqLJF+8NB0LTueNpzFATcFTqkaURw+hyOf/bFsPSlYBlqwyMK2BJro27eEUr00eTglNY3DKYqkeNI99
        P/Jc/fErpZRSpd27C9EU4LQGnghOhKcIpxI8eTgdA08EKA8nX4UAKskhaRKWrAOSYuNgspajqfQxXQdO
        NZQ8nIbQNP5fA6n9yJVSSqmpNUDy1VhKRTStDac1r05r4CnCaQxPBKhSPN38mG/sqghDuQhHsWlYasE0
        98qUQ1MLpwUvhTs0ZeFUY6mFUx5KuZH3hq6UUkotCcDk0XQqOBGeIpzOGU8JTr6KIDRWB0rWAUcUgamP
        JWsPprloGrs0zbk2RTj1r03x0uTANASkw8BjcfBKKaXUnHZgsgBNa8GpFE8RToSnMTiV4CnCaUs8paoe
        iHIdUJSLsLQVmFZDkzWApgZODZro2jSApgEcNQPPdRi+UkopVVILJV8XTcNwOv+r0zng6aZHf72pIhAN
        lcPSGmAqRVMHTFugKVybitAEYIog4oErpZRSY+0xNJSHUgdMDk3DF6f14UR4GoMT4SnCifA0BqclePJw
        8lVdFOUqwZLFWFoCppIr09poGnpEl0OTB1Nu/DTwXM3wlVJKqZIclCKYpl6b1oZTCZ4inM4ZT6kaUV0g
        pRhJqfx1aVUwWTWQiq9M1mQ0xWtTBk0HOI2jaQBDMPCYH7xSSik1Jw+miKZzghPhqQROp8LTjY/6WqeK
        keRbD0yjaAIwDaKpRtJyNO3hNIamBk4BTB5NhKXhcfv2Q1dKKaWmtAOSzz2a82AqRZN1bDiV4inCifAU
        4bQUTxFOvhpRLZJyUEoNg6mPpqVXpnXQRL+raS6a9nDqoCkDpoij/rhT+5ErpZRSU/NAikUwpUrRZJ0D
        nAhPEU7HxtMNj/zqroqwZBGYrDXBFNHUAZM1AqYGTTWWJr/TNBdNDk4Epi6WhkdO41ZKKaXWiLDkW4Im
        61KCk7UUTwlOvoqglMqBaS6aPJh6aKqRNBdN8cp0dDRlwESj9tGolVJKqbUjMKVK4RTRdAw4LcVTKZys
        Ujj5qhZKeTBZp0BT/9Eco2kHphOgaQxMNGSllFJq7QhHuQhN1v0FTtbWeLKuf8RXDFFDYJqPpg6YrACm
        +xuaaNQ+GrJSSim1VQQl39poso4BJ6sUTtYacDIwUVXEEoLJGkFTD04jYGrQVEPJP5rLoqkGUwdNNZg8
        mnZg6qEJ/u+5A5j6aHIvgAc0RTANoYmGTNGglVJKqS0iMFmlaLJK0WSdI5ystfCUqhBM1gw0FT2euwTR
        RFiyCEcpGrFSSim1VoSisQhNVimarFI0WSVosghN1lZwsghNFmEpV5WwFMFEcJqFps7juYVoqqEU0ZTA
        VIKmHZg2QBONO0UjVkoppbaKkOQjMFkEJmsJmqbCidBkEZosQpNFaLIITRYBKXbdw7/cqxpCE8FpCE0N
        nBo07eF0UjTtwHQcNNGYfTRmpZRSaqsISykCk0VosrZAk0VosghNFqHJIjRZhKYUYSlFaIpVg2iyRuA0
        fm06oOkApwZNBzh10HSAk0fTlMdzx0QTISlFQ47RoJVSSqktIiylCEwWocl6oMPJVxGaiuBUg8nDqfTa
        lNDkr03nhCYCk0VYsghIFo1YKaWUWjNC0VCEpRSByTonNFmEJovAlCIw+QhI1LUP+1KnitC0FE6D16Ya
        S7lHdDs0OTghmho4nQ+aaNgpGrFSSim1VQSkGGEpdQo0WQQmi8CUIjClCEs+QlIsoilW5dA0G06Zd5tK
        rk1dNMVr0/HRNAVMNOQYDVkppZTaMoJSisBkEZgsApNFYLIISykCU4rAZBGWfIQlH0HJR1AaqloLTglN
        OTgRmrLXpksYTTTgXDRopZRSaosISxZhKUVgsghMFmEpRVhKEZgsgpKPoOQjKMUIR6VVOzRtdHHa+tp0
        ajQRjFI0YKWUUmqLCEcUQSlFWEoRmCzCUoqwlCIwWQQlH0HJR0iiCES5rnnoF7NVezQNwyl3dZoHp3XR
        ZJ0aTTToFI1YKaWU2ioCUoyglCIspQhLFkEpRVhKEZR8BKUYISlGOKIISkNVCCe4Op0TnNZGE4HJWhNM
        NGKllFJqywhJMcKSRVhKEZZShKUUQclHSPIRkCgCUi7CUWk1ojJwmoGnNeC0BE3WsdBEULJoxBQNWSml
        lNoqgpKPsGQRlFIEpRQhyUdIihGQYgSjoQhDc6uWwgnxdEQ4laDJ2gJNhKMUDVgppZRaOwLRWISlFGEp
        RVhKEZRSBKQYAYkiGOUi+Ax19UO+MKkqwmmtq9Op4XRMNNGoUzRepZRSausISDGCUoqglCIo+QhJPsIR
        RTDKRSgai2A0pSoPpxZPc69Oa8EpoongVIomawmaCEopGnGMRqyUUkptGSEpRliyCEk+QpKPcEQRjHIR
        iMYiBC2tmv7Irn91moqnOXCKaJoCpy3QREBK0YCVUkqpNSMIlUZYShGUUoSkGAEpRjDKRSAairCzVdUS
        PE2BE+Hp1HAiNFlT0ETD9tF4lVJKqa0jIMUISj5Cko+AFCMY5SIUDUWwmdtVD75ztPh3akRti6cxOJXg
        qQROJWjKwYnQZE1FE42YoiErpZRSW0VAihGSfASkGMEoF6EoV8TL3AhGc0qfV50KT2vAifC0BE6EJovA
        ZBGQUjRipZRSas0IQyURkmKEJB/BKBfBKJdHz9wIPltU9fF09+A7T8fG0yngRGCyCEsWDdtHA1ZKKaWO
        EQEpRkiKEY4oghFF+JkSoebYVR5P7fWpj6cIqGPjKcKJ8HQOcKIBT4nGrZRSSq0ZISlGQIoRjihCUGmE
        l3OpKvk9Tx5PEVDHxtOp4ERgsghCPhqvUkopdawISBQhKUZAoghDJRFUzrlqrUd354gngpO1JZxowEop
        pdQaEX7mRkiKEZBihKGSCCVrduWDPr8o+sxYVfLoLgLK42kMUFvjKcIph6dSOFlrw4nGq5RSSh0rAhJF
        SIoRiMYigCyN4LNF9N2pagxQHk9jgLqU8URwsghNFmEpRQNWSimljhHhaCiCUoxgNBSBY24Em2NHP9dV
        D77z4v/iaYnEXSqQBQAAAABJRU5ErkJggg==
</value>
  </data>
</root>